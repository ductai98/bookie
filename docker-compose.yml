version: '3.8'

networks:
  microservice-networks:
    driver: bridge


services:
  discoveryserver:
    build:
      context: .
      dockerfile: discoveryserver/Dockerfile
    ports:
      - "8761:8761"
    networks:
      - microservice-networks

  bookservice:
    build:
      context:  .
      dockerfile: bookservice/Dockerfile
    ports:
      - "9001:9001"
    networks:
      - microservice-networks
    depends_on:
      - discoveryserver
      - axonserver
    environment:
      - "AXONIQ_AXONSERVER_SERVERS=axonserver:8024"

  notificationservice:
    build:
      context: .
      dockerfile: notificationservice/Dockerfile
    ports:
      - "9003:9003"
    networks:
      - microservice-networks
    depends_on:
      - kafka
      - zookeeper
      - axonserver
    environment:
      - "KAFKA_BOOTSTRAP_SERVERS=kafka:9092"
      - "AXONIQ_AXONSERVER_SERVERS=axonserver:8024"

  axonserver:
    image: "axoniq/axonserver:latest"
    hostname: axonserver
    container_name: axonserver
    environment:
      - "AXONIQ_AXONSERVER_STANDALONE=TRUE"
    ports:
      - "8024:8024"
      - "8124:8124"
      - "8224:8224"
    networks:
      - microservice-networks

  apigateway:
    build:
      context:  .
      dockerfile: apigateway/Dockerfile
    ports:
      - "8080:8080"
    networks:
      - microservice-networks
    depends_on:
      - discoveryserver
      - redis

  redis:
    container_name: redis
    hostname: redis
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - microservice-networks
  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    networks:
      - microservice-networks

  kafka:
    image: confluentinc/cp-kafka:7.7.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092, PLAINTEXT_HOST://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      CONFLUENT_METRICS_REPORTERS_BOOTSTRAP_SERVERS: kafka:29092
      CONFLUENT_METRICS_ENABLE: "true"
      CONFLUENT_METRICS_REPORTERS_TOPIC_REPLICAS: 1
      CONFLUENT_SUPPORT_CUSTOMER_ID: 1

    depends_on:
      - zookeeper
    networks:
      - microservice-networks

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.7.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - kafka
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka:29092
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    networks:
      - microservice-networks
